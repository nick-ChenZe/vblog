{"meta":{"title":"利用getBoundingClientRect()实现图片LazyLoad","date":"2016-04-23T14:54:19.000Z","tags":["JavaScript"],"categories":"笔记","id":"10050484954515051","prev":{"title":"util模块","id":"2235950484954515055"},"next":{"title":"利用css的attr属性制作小tips","id":"11550484954515051"}},"content":"<h2>引言</h2>\n<p>在前端设计中，由于网页短时间内可提供的资源有限，尤其是移动端，为了让用户不必为了未知的页面内容等待太久，资源的有序加载是一种优化性能的手段，即只留下唯一的，不可替代的。</p>\n<h2>核心</h2>\n<h3>方法：getBoundingClientRect</h3>\n<p>getBoundingClientRect()是Dom节点的方法，返回一个元素的大小及其相对于视口的位置,返回值是一个DOMRect对象。如图所示。</p>\n<h3>思想</h3>\n<p>当图片进入视窗之前，我们用一个小的图片替代它。当其进入视窗后，用它的备用<code>data-src</code>属性替换掉原来的<code>src</code>。</p>\n<h3>代码</h3>\n<p>我们需要遍历获取到的img元素，然后去判断它是否需要被加载。</p>\n<pre class=\"hljs\" lang=js><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isLoad</span>(<span class=\"hljs-params\">el</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> top = el.getBoundingClientRect().top;\n    <span class=\"hljs-keyword\">return</span> top&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; top&lt;=<span class=\"hljs-built_in\">window</span>.innerHeight;\n}\n</code></pre>\n<p>如果图片被加载了，则从数组中移除。</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lazyLoad</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> m;\n    <span class=\"hljs-keyword\">for</span>(m =<span class=\"hljs-number\">0</span>;m&lt;images.length;m++){\n        <span class=\"hljs-keyword\">if</span>(isLoad(images[m])){\n            loadImage(images[m],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n                images.splice(m,m);\n            });\n        }\n    }\n}\n</code></pre>\n<p>其中的加载函数的核心，是<code>replaceChild(targetNode,node)</code>该方法将node节点替换掉原来的<code>targetNode</code></p>\n<h2>完整代码</h2>\n<pre class=\"hljs\" lang=js><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> images = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">\".lazy-load\"</span>);\n        <span class=\"hljs-keyword\">var</span> len = o.length,p=[],n=<span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span>(;n&lt;len;n++){\n            p.push(o[n]);\n        }\n        <span class=\"hljs-keyword\">return</span> p;\n    })();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isLoad</span>(<span class=\"hljs-params\">el</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> top = el.getBoundingClientRect().top;\n        <span class=\"hljs-keyword\">return</span> top&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; top&lt;=<span class=\"hljs-built_in\">window</span>.innerHeight;\n    }\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadImage</span> (<span class=\"hljs-params\">el, callback</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> Image()\n                , src = el.getAttribute(<span class=\"hljs-string\">'data-src'</span>);\n        img.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (!! el.parent){\n                el.parent.replaceChild(img, el);\n            }\n            <span class=\"hljs-keyword\">else</span>{\n                el.src = src;\n            }\n            callback? callback() : <span class=\"hljs-literal\">null</span>;\n        };\n        img.src = src;\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lazyLoad</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> m;\n        <span class=\"hljs-keyword\">for</span>(m =<span class=\"hljs-number\">0</span>;m&lt;images.length;m++){\n            <span class=\"hljs-keyword\">if</span>(isLoad(images[m])){\n                loadImage(images[m],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n                    images.splice(m,m);\n                });\n            }\n        }\n    }\n    lazyLoad();\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"scroll\"</span>,lazyLoad);\n})();\n</code></pre>\n<h2>联想</h2>\n<p><code>getBoundingClientRect</code>还可用来做入场动画。当我们的前台展示页面的结构是如下的时候</p>\n<pre class=\"hljs\" lang=html><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span>\n\t<span class=\"hljs-comment\">&lt;!-- other structure --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\t\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\t\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\t\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\t\n</code></pre>\n<p>我们可以对<code>section</code>元素做视图判断，如果在视图内，则添加类似<code>on</code>的状态类，再在样式表内写入场动画效果类似</p>\n<pre class=\"hljs\" lang=css><code><span class=\"hljs-selector-class\">.page</span><span class=\"hljs-selector-class\">.on</span>{\n\t&lt;!--any animation--&gt;\n\t<span class=\"hljs-attribute\">animation</span>:\n}\n</code></pre>\n<h2>参考链接</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\">Element.getBoundingClientRect | MDN </a></li>\n<li><a href=\"https://css-tricks.com/snippets/javascript/lazy-loading-images/\">Lazy Loading Images | CSS-TRICK</a></li>\n</ol>\n"}