{"meta":{"title":"[译]那些你早就应该知道关于JavaScript作用域（scope）的事","date":"2016-04-17T23:12:19.000Z","tags":["JavaScript","闭包","作用域"],"categories":"翻译","banner":"http://i.niupic.com/images/2016/04/20/WZpXaW.jpg","thumbnail":"http://7xt64w.com2.z0.glb.clouddn.com/quill-175980_1280.png","id":"2010750484954514956","length":5120,"next":{"title":"利用css的attr属性制作小tips","id":"11550484954515051"},"prev":{"title":"mac启动apache及更改配置路径","id":"2445250484954514955"}},"content":"<h2>引言</h2>\n<blockquote>\n<p>原文地址：https://spin.atomicobject.com/2014/10/20/javascript-scope-closures</p>\n<p>原文标题：What You Should Already Know about JavaScript Scope</p>\n<p>译者注：术语在第一次使用时会在括号内备注</p>\n</blockquote>\n<p>如果你是一个JavaScript菜鸟，或者说你已经为了给你的网站添加几个动画效果被JQuery弄的一头包，现在是你弥补这一大块JavaScript知识的机会。</p>\n <!-- more -->\n<p>其中一个最重要的概念就是作用域如何绑定到<code>this</code>上的。</p>\n<p>基于这一点，当我在讨论作用域时（ 块级<code>(block)</code>作用域 vs. 函数作用<code>(function)</code>域，其中的关键词，词法作用域<code>(lexcial)</code> vs. 动态作用域<code>(dynamic)</code> ）我假定你已经对基础的JavaScript语法和对象以及常规术语有一定的了解。</p>\n<h2>词法作用域</h2>\n<p>首先，JavaScript在函数作用域内还包含有词法作用域。换句话说，即使JavaScript看上去应该是一种有块级作用域的，因为它使用了<code>{}</code>花括号，只有当你创建一个函数时，一个新的块级作用域才会产生。</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-keyword\">var</span> outerFunction  = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">true</span>){\n      <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">5</span>;\n      <span class=\"hljs-comment\">//console.log(y); //line 1, ReferenceError: y not defined</span>\n   }\n   <span class=\"hljs-keyword\">var</span> nestedFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">true</span>){\n         <span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">7</span>;\n         <span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">//line 2, x will still be known prints 5</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">true</span>){\n         <span class=\"hljs-built_in\">console</span>.log(y); <span class=\"hljs-comment\">//line 3, prints 7</span>\n       }\n   }\n   <span class=\"hljs-keyword\">return</span> nestedFunction;\n}\n<span class=\"hljs-keyword\">var</span> myFunction = outerFunction();\nmyFunction();\n</code></pre>\n<p>在这个例子中，在<code>outerFunction()</code>这个函数内部，变量x是随时随地都可以获取到的。同样的，变量y也是暴露在<code>nestedFunction()</code>内部的，但是它们在定义的函数外部都是无法获取到的。词法作用域能够解释这个问题。变量的作用在源码中它们定义的位置被同时定义。为了处理这些变量，JavaScript会从最内部的作用域开始查找逐步向外直到找到想找到的变量为止。词法作用域很好，因为它能帮助我们在源码中很简单的找到变量的值；但是在动态作用域内，变量意义会在程序运行时改变，使它看起来更加复杂。</p>\n<h2>闭包(Closures)</h2>\n<p>事实上，我们还是没有搞清楚为什么变量x我们能获取到，因为，正常来讲，一个函数内部的本地变量会在函数执行完随函数一起被回收。我们调用了<code>outerFunction()</code>这个函数，还委派它的结果，<code>nestedFunction()</code>，让<code>myFunction()</code>指向它。如果<code>outerFunction()</code>已经回收了，为什么变量x依然存在。</p>\n<p>仅仅是为了在立即作用域<code>(immediate scope)</code>（不需要返回语句）外部获取变量将会创造一个叫闭包的东西。火狐开发者网络（MDN）对此给了一个很好的定义：</p>\n<blockquote>\n<p>闭包是一种特殊的对象，它由两种东西组合：一个函数，和函数创建的环境。这个环境有持很多在闭包创建时的本地变量。</p>\n</blockquote>\n<p>由于x是创建函数<code>nestedFunction()</code>的环境的一个成员，所以<code>nestedFunction()</code>可以有权得到它。还不清楚吗？接下来就更有趣了，因为这看上不去不像是常规的变量。试试这个例子，它在一个包含许多属性的对象中嵌套了函数。</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-keyword\">var</span> cat = {\n   name: <span class=\"hljs-string\">\"Gus\"</span>,\n   color: <span class=\"hljs-string\">\"gray\"</span>,\n   age: <span class=\"hljs-number\">15</span>,\n   printInfo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Name:\"</span>, <span class=\"hljs-keyword\">this</span>.name, <span class=\"hljs-string\">\"Color:\"</span>, <span class=\"hljs-keyword\">this</span>.color, <span class=\"hljs-string\">\"Age:\"</span>, <span class=\"hljs-keyword\">this</span>.age); <span class=\"hljs-comment\">//line 1, prints correctly</span>\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Name:\"</span>, <span class=\"hljs-keyword\">this</span>.name, <span class=\"hljs-string\">\"Color:\"</span>, <span class=\"hljs-keyword\">this</span>.color, <span class=\"hljs-string\">\"Age:\"</span>, <span class=\"hljs-keyword\">this</span>.age); <span class=\"hljs-comment\">//line 2, loses cat scope</span>\n      }\n   \t   nestedFunction();\n    }\n}\ncat.printInfo(); <span class=\"hljs-comment\">//prints Name: window Color: undefined Age: undefined</span>\n</code></pre>\n<p>为什么在日志的第二行<code>color</code>和<code>age</code>都是<code>undefined</code>？你可能会这样想，“<code>cat</code>这个对象的属性很清楚的定义在上面这个例子中，而且还在最外面的全局中，不是吗？”</p>\n<p>当JavaScript在函数内部的调用函数，且该函数内部还嵌套的另外一个函数时会丢失这个作用域。当这个作用域丢失时，默认的，它会被绑定到全局的<code>window</code>对象。在我们的例子中，和结果和我们说的一样，<code>window</code>对象也有一个值为<code>window</code>的<code>name</code>属性。</p>\n<h2>控制作用域（Controlling Context）</h2>\n<p>所以还有什么要讲的呢？</p>\n<p>我们不能改变词法作用域是如何在JavaScript工作的，但是我们能够控制我们调用函数的上下文。上下文是在程序运行期间当函数被调用时决定的，它一般都会与一个对象绑定，函数在这个对象内被调用。只有一个例子不适用于这个规则，上面我们提到的嵌套函数。</p>\n<p>刚才说了，要改变上下文，我的意思是，我们要改变这个<code>this</code>真正的指向。在下面这个例子中。日志的第一行和第二行会打印出什么呢？</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-keyword\">var</span> obj1 = {\n   printThis: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);\n   }\n};\n \n<span class=\"hljs-keyword\">var</span> func1 = obj1.printThis;\nobj1.printThis(); <span class=\"hljs-comment\">//line 1</span>\nfunc1(); <span class=\"hljs-comment\">//line 2</span>\n</code></pre>\n<p>第一行打印出了对象<code>obj1</code>。第二行打印出了<code>window</code>对象。第一行的上下文是<code>obj1</code>，因为我们直接调用了<code>printThis()</code>这个函数。但是，在调用<code>func1()</code>时，我们首先存储了对于<code>printThis()</code>函数的引用，之后在全局对象的上下文中调用了它；结果就是，它把全局对象<code>window</code>打印出来了。如果<code>func1()</code>被嵌套在不同的函数内，那么打印的结果就是它自己的上下文。</p>\n<h2>三个函数 Call, Bind, and Apply</h2>\n<p>有很多方法可以控制<code>this</code>的值，包括下面这些：</p>\n<ol>\n<li>在另一个变量中存储一个<code>this</code>的引用</li>\n<li><code>.call()</code></li>\n<li><code>.apply()</code></li>\n<li><code>.bind()</code></li>\n</ol>\n<p>第一个：</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-keyword\">var</span> cat = {\n   name: <span class=\"hljs-string\">\"Gus\"</span>,\n   color: <span class=\"hljs-string\">\"gray\"</span>,\n   age: <span class=\"hljs-number\">15</span>,\n   printInfo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">var</span> that = <span class=\"hljs-keyword\">this</span>;\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Name:\"</span>, <span class=\"hljs-keyword\">this</span>.name, <span class=\"hljs-string\">\"Color:\"</span>, <span class=\"hljs-keyword\">this</span>.color, <span class=\"hljs-string\">\"Age:\"</span>, <span class=\"hljs-keyword\">this</span>.age); <span class=\"hljs-comment\">//prints correctly</span>\n \n      nestedFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n         <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Name:\"</span>, that.name, <span class=\"hljs-string\">\"Color:\"</span>, that.color, <span class=\"hljs-string\">\"Age:\"</span>, that.age); <span class=\"hljs-comment\">//prints correctly</span>\n      }\n   nestedFunction();\n   }\n}\ncat.printInfo();\n</code></pre>\n<p>因为我们将<code>this</code>绑定到一个变量上，所以它会和其他变量一样是可以访问的。接下去让我们试试<code>call()</code>, <code>apply()</code>, and <code>bind()</code>这三个函数，我想应该会更简洁。</p>\n<pre class=\"hljs\"><code>var cat = {\n   name: &quot;Gus&quot;,\n   color: &quot;gray&quot;,\n   age: 15,\n   printInfo: function() {\n      console.log(&quot;Name:&quot;, this.name, &quot;Color:&quot;, this.color, &quot;Age:&quot;, this.age);\n      nestedFunction = function() {\n         console.log(&quot;Name:&quot;, this.name, &quot;Color:&quot;, this.color, &quot;Age:&quot;, this.age);\n      }\n      nestedFunction.call(this);\n      nestedFunction.apply(this);\n \n      var storeFunction = nestedFunction.bind(this);\n         storeFunction();\n      }\n}\ncat.printInfo();\n</code></pre>\n<p>注意每个函数的第一个参数：<code>this</code>。它代表了<code>cat</code>对象。现在，<code>nestedFunction()</code>函数的<code>this</code>就指向了<code>cat</code>对象。如果，我们传入一个<code>dog</code>对象，而不是传入<code>this</code>，那么函数的<code>this</code>就是指向<code>dog</code>的。\n简单来说，第一个参数就代表了<code>nestedFunction()</code>函数的<code>this</code>指向。</p>\n<p>所以这三个函数有什么不同呢？</p>\n<p><code>call</code>和<code>apply</code>最大的不同是如何传入额外的参数。<code>call</code>函数需要传入用逗号隔开的多个参数，才能让<code>nestedFunction()</code>能够接收到。<code>bind</code>和<code>call</code>情况一样。但是，<code>apply</code>传入的是一个单个数组，这个数组包含了要传入的所有参数。</p>\n<p>这对于记住如何用<code>call</code>和<code>apply</code>真正你的函数很重要。下面这是不正确的（注意<code>nestedFunction</code>后面的<code>()</code>）:</p>\n<pre class=\"hljs\" lang=js><code>   nestedFunction().call(<span class=\"hljs-keyword\">this</span>);\n</code></pre>\n<p><code>bind()</code>函数,换句话说，很讨巧，因为它允许你改变<code>this</code>的引用，接着在一个准备以后调用的变量上，存储一个改变了的函数的引用（看上面代码例子中的<code>storeFunction</code>）。同事，因为<code>call</code>和<code>apply</code>会立即在函数内执行，它们都会返回函数调用的结果。</p>\n<h2>应用练习 Practical Applications</h2>\n<p>至此，我们了解了闭包，<code>call()</code>，<code>apply()</code>，<code>bind()</code>，但是我们没有讨论过任何实际应用的例子和什么时候该用什么区绑定正确的<code>this</code>。</p>\n<p>在面对类似上面第一个<code>cat</code>对象例子的嵌套函数时，闭包是最好的选择，我们可以<code>var that = this</code>这样。这个方法同样很多，因为你不需要担心跨域的问题。另外，<code>bind</code>函数在ECMAScript5中刚被添加的，浏览器支持度还不是很好。</p>\n<p><code>call</code>和<code>apply</code>当你需要在一个完全不同的对象上下文内调用另一个对象的方法时是非常有用的。举个例子，用我们上面cat那个例子，我们能够复用<code>printInfo()</code>函数打印<code>dog</code>对象的信息。</p>\n<p><code>bind</code>在异步回调和事件中维持上下文非常有用。</p>\n<p>很好！我希望你现在已经有一点了解作用域在JavaScript中是如何处理的。我们涵盖了基础的函数作用域中词法作用域，闭包，通过上下文控制闭包，<code>call()</code>，<code>apply()</code>，<code>bind()</code>，然后最后的最后，多做一些练习应用。</p>\n"}