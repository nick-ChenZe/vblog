{"meta":{"title":"AngularJS入门笔记（三）","date":"2016-02-28T21:52:19.000Z","tags":["AngularJS"],"categories":"笔记","thumbnail":"http://7xt64w.com2.z0.glb.clouddn.com/owl-158414_1280.png","id":"6528950484954495057","prev":{"title":"ES6笔记(上）","id":"6528950484954504954"},"next":{"title":"AngularJS入门笔记（二）","id":"65289504849544950"}},"content":"<h2>没关系的引导语</h2>\n<p>动态语言和静态语言的区别？</p>\n<blockquote>\n<p>Static typing when possible, dynamic typing when needed。</p>\n</blockquote>\n<p>动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。</p>\n<p>静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等</p>\n <!--more-->\n<p><a href=\"https://docs.angularjs.org/api/ng/directive/ngApp\">链接</a></p>\n<h2>动态加载数据</h2>\n<p>AngularJS可以通过<code>.get()</code>方法，做类似jQuery的ajax操作，在使用前，需要依赖注入<code>$http</code>服务。</p>\n<pre class=\"hljs\" lang=js><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myController</span>(<span class=\"hljs-params\">$scope,$http</span>) </span>{\n\n    $http.get(<span class=\"hljs-string\">'data.json'</span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n        $scope.apples = data.result;\n    });\n\n    $scope.orderProp = <span class=\"hljs-string\">'num'</span>;\n\n}\n</code></pre>\n<h2>路由管理</h2>\n<p>AngularJS可以自定义路由来达到应用式的跳转，在更换页面是无需再做必要的加载。我们需要在模块里注入<code>ngRoute</code>依赖。</p>\n<pre class=\"hljs\" lang=html><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ng-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>AngularJS会根据地址更换ngView中的内容，同时需要引入从AngularJS中分离出来的的路由模块</p>\n<pre class=\"hljs\" lang=js><code>myApp.config([<span class=\"hljs-string\">'$routeProvider'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$routeProvider</span>) </span>{\n    $routeProvider.\n        when(<span class=\"hljs-string\">'/apples'</span>, {\n            templateUrl: <span class=\"hljs-string\">'list.html'</span>,\n            controller: <span class=\"hljs-string\">'myController'</span>\n        }).\n        when(<span class=\"hljs-string\">'/apples/:appleid'</span>, {\n            templateUrl: <span class=\"hljs-string\">'detail.html'</span>,\n            controller: <span class=\"hljs-string\">'detail'</span>\n        }).\n        otherwise({\n            redirectTo: <span class=\"hljs-string\">'/apples'</span>\n        });\n}]);\n</code></pre>\n<p>在上面这段配置代码中，<code>$routeProvider</code>提供路由服务，而后面的<code>/apples</code>和<code>/apples/:appleid</code>则是具体的路由地址，默认情况下我们会跳转了<code>/apples</code>映射到<code>list.html</code>上，而<code>appleid</code>则会映射到具体信息的页面，appleid也成为了信息检索的唯一参数，如果没有这个参数，我们可能就需要一些特别的判断去告诉浏览器，这个页面我们需要展示什么东西。</p>\n<pre class=\"hljs\" lang=js><code>controllers.controller(<span class=\"hljs-string\">'detail'</span>,[<span class=\"hljs-string\">'$scope'</span>,<span class=\"hljs-string\">'$routeParams'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$scope,$routeParams</span>)</span>{\n\t$scope.num = $routeParams.appleid;\n}]);\n</code></pre>\n<p>在控制器里我们通过<code>$routeParams</code>讲路由中的区分参数绑定到当前作用域中的<code>num</code>上，接着你可以通过这个<code>num</code>去展示任务与其相关的内容了。</p>\n<pre class=\"hljs\" lang=html><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"../node_modules/angular/angular-route.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2>通过事件更新视图</h2>\n<p>我们整个结构都是去更新Model层的数据，从而反应到View层上来，所以在某个元素上绑定一个点击事件，更改图片的<code>src</code>，那么结果就是展示的图片会因点击元素的不同而不同。</p>\n<pre class=\"hljs\" lang=js><code>$scope.clickHandler = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url</span>) </span>{\n\t\t$scope.imgUrl = url;\n\t};\n</code></pre>\n<pre class=\"hljs\" lang=html><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">ng-src</span>=<span class=\"hljs-string\">{{imgUrl}}</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">ng-src</span>=<span class=\"hljs-string\">{{apple.url}}</span> <span class=\"hljs-attr\">ng-click</span>=<span class=\"hljs-string\">\"clickHandler(apple.url)\"</span>&gt;</span>\n</code></pre>\n<p>下面的<code>img</code>元素会通过其<code>ngClick</code>事件，将自身的<code>src</code>传给上面的<code>img</code>的引用超链接，结果就会如下面的图片那样</p>\n<p><img src=\"../../../img/1.gif\" alt=\"1\"></p>\n<h2>自定义过滤器</h2>\n<p>我们通常希望从一些复杂的信息中提取我们需要的内容，在进行判断。</p>\n<pre class=\"hljs\" lang=js><code>filters.filter(<span class=\"hljs-string\">'check'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\">\t'use strict'</span>;\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">input</span>) </span>{\n\t\t<span class=\"hljs-keyword\">return</span> input &gt; <span class=\"hljs-number\">200</span> ? <span class=\"hljs-string\">'\\u2713'</span> : <span class=\"hljs-string\">'\\u2718'</span>;\n\t}\n});\n</code></pre>\n<p><code>check</code>命名了一个自定义过滤器的值，通过函数对接收到的值做处理，最后<code>return</code>想要展示的内容。过滤器可以向之前那样绑定</p>\n<pre class=\"hljs\" lang=html><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{applelist.id | check}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n"}